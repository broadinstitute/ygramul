CREATE CONSTRAINT trait_id FOR (trait:Trait) REQUIRE trait.id IS UNIQUE;
CREATE CONSTRAINT gene_id FOR (gene:Gene) REQUIRE gene.id IS UNIQUE;
CREATE CONSTRAINT trait_gene_set_id FOR (tgs:TraitGeneSet) REQUIRE tgs.id IS UNIQUE;
LOAD CSV WITH HEADERS FROM 'file:///pheno_gene.csv' AS row MERGE (t:Trait { id:row.pheno}) MERGE (g:Gene {id: row.gene } ) MERGE (t)-[e:TRAIT_GENE]->(g) SET e.combined = toFloat(row.combined) SET e.log_bf = toFloat(row.log_bfs) SET e.prior = toFloat(row.prior);
LOAD CSV WITH HEADERS FROM 'file:///phenotype_names.csv' AS row MERGE (t:Trait { id:row.phenotype }) SET t.label = row.phenotype_name;
LOAD CSV WITH HEADERS FROM 'file:///pheno_geneset.csv' AS row CALL(row) { MERGE (tgs:TraitGeneSet {id: row.pgs }) MERGE (t:Trait {id: row.pheno}) MERGE (tgs)-[e:TRAIT_GENE_SET]->(t) SET e.beta = toFloat(row.beta) SET e.beta_uncorrected = toFloat(row.beta_uncorrected) }  IN TRANSACTIONS OF 200 ROWS;
LOAD CSV WITH HEADERS FROM 'file:///gene_geneset.csv' AS row CALL(row) { MERGE (g:Gene {id: row.gene }) MERGE (tgs:TraitGeneSet {id: row.pgs }) MERGE (g)-[e:GENE_GENE_SET]->(tgs) SET e.beta = toFloat(row.beta) }  IN TRANSACTIONS OF 200 ROWS;
